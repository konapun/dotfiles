# React
snippet rfc "React Functional Component" b
import React from 'react'
import PropTypes from 'prop-types'

function ${1:`!v expand('%:t:r')`}({ $3 }) {
  return (
    <${5:div} className={styles.base}>
      $0
    </$5>
  )
}

$1.defaultProps = {$4}

$1.propTypes = {`!p
props = t[3]
if props:
  snip >> 1
  for prop in props.split(', '):
    snip += prop + ': PropTypes.any,'
`
}

export default $1
endsnippet

snippet cn "className"
className="$1"
endsnippet

snippet dp "Default Props" b
${1:`!v expand('%:t:r')`.}defaultProps = {
  $2
}
endsnippet

snippet ref "Ref" i
ref={${1:ref} => { this.${2:name} = $1 }}
endsnippet

# PropTypes
snippet pt "PropTypes Definition" b
${1:`!v expand('%:t:r')`.}propTypes = {
  ${2:className}: ${3:PropTypes.string},
}
endsnippet

snippet  pt.a "PropTypes Array" w
PropTypes.array${1:,}
endsnippet

snippet   pt.b "PropTypes Boolean" w
PropTypes.bool${1:,}
endsnippet

snippet pt.f "PropTypes Function" w
PropTypes.func${1:,}
endsnippet

snippet pt.n "PropTypes Number" w
PropTypes.number${1:,}
endsnippet

snippet pt.o "PropTypes Object" w
PropTypes.object${1:,}
endsnippet

snippet pt.s "PropType String" w
PropTypes.string${1:,}
endsnippet

snippet pt.no "PropTypes Node" w
PropTypes.node${1:,}
endsnippet

snippet pt.e "PropTypes Element" w
PropTypes.element${1:,}
endsnippet

snippet pt.io "PropTypes instanceOf" w
PropTypes.instanceOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.one "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])${1:,}
endsnippet

snippet pt.onet "PropTypes oneOfType" w
PropTypes.oneOfType([
  $2
])${1:,}
endsnippet

snippet pt.ao "PropTypes arrayOf" w
PropTypes.arrayOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.oo "PropTypes objectOf" w
PropTypes.objectOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.sh "PropTyes Shape" w
PropTypes.shape({
  $2
})${1:,}
endsnippet

snippet ir "isRequired" w
isRequired,
endsnippet

snippet us.s "useState" w
const [$1, set${1/\w+\s*/\u$0/g}] = useState(${3:''})${0:}
endsnippet

snippet us.e "useEffect" w
useEffect(() => {
  $1
})${0:}
endsnippet

snippet us.er "useEffect with return" w
useEffect(() => {
  $1
  return () => {
    $2
  }
})${0:}
endsnippet

snippet us.c "useContext" w
const $1 = useContext($2)${0:}
endsnippet

snippet us.r "useReducer" w
const [$1, dispatch] = useReducer($1Reducer, ${2:${VISUAL:initialState}})
const $1Reducer = (state, action) => {
  switch (action.type) {
    default:
      return state
  }
}${0:}
endsnippet

snippet us.cb "useCallback" w
useCallback(() => {
  $1
}, [$2])${0:}
endsnippet

snippet us.m "useMemo" w
const $1 = useMemo(() => {
  $2
}, [$3])${0:}
endsnippet

snippet us.rf "useRef" w
const $1 = useRef($2)${0:}
endsnippet

snippet iife "Immediately Invoked Function Expression"
(() => {
  $0
})()
endsnippet

snippet if "if"
if (${1:condition}) {
  $0
}
endsnippet

snippet if.e "if else" w
if (${1:condition}) {
  $2
} else {
  $0
}
endsnippet

snippet fn "function"
function ${1:name} ($2) {
  $0
}
endsnippet

snippet fn.a "Anonymous function" w
const ${1:name} = ($2) => {
  $0
}
endsnippet

snippet fn.ai "Inline anonymous function" w
const ${1:name} = ($2) => $0
endsnippet

snippet fn.ao "Anonymous function returning object" w
const ${1:name} = ($2) => ({
  $0
})
endsnippet

snippet im "import"
import ${1:foo} from '${2:bar}'
endsnippet

snippet ex "export"
export ${1:default} ${2:bar}
endsnippet

snippet ex.c "export const" w
export const ${1:name} = $0
endsnippet

snippet prom "promise"
new Promise((resolve, reject) => {
  $0
})
endsnippet

snippet c.log "console log" w
console.log('${0:message}')
endsnippet

snippet c.err "console error" w
console.error('${0:message}')
endsnippet
